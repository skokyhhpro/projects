# Test generated by RoostGPT for test awesome-python-ceaser-cipher using AI Type Open AI and AI Model gpt-4

import unittest
from cipher import encrypt

class TestEncrypt(unittest.TestCase):

    def test_Encrypt_71580cd1e0(self):
        # Test case 1: Testing with a simple message and a positive encryption number
        self.assertEqual(encrypt("Hello World", 3), "Khoor Zruog")

        # Test case 2: Testing with a simple message and a negative encryption number
        self.assertEqual(encrypt("Hello World", -3), "Ebiil Tloia")

        # Test case 3: Testing with a message containing special characters and a positive encryption number
        self.assertEqual(encrypt("Hello, World!", 3), "Khoor, Zruog!")

        # Test case 4: Testing with a message containing numbers and a positive encryption number
        self.assertEqual(encrypt("Hello World 123", 3), "Khoor Zruog 456")

        # Test case 5: Testing with a message containing numbers and a negative encryption number
        self.assertEqual(encrypt("Hello World 123", -3), "Ebiil Tloia 890")

        # Test case 6: Testing with a complex message containing letters, numbers, special characters and a positive encryption number
        self.assertEqual(encrypt("Hello, World! 123", 3), "Khoor, Zruog! 456")

        # Test case 7: Testing with a complex message containing letters, numbers, special characters and a negative encryption number
        self.assertEqual(encrypt("Hello, World! 123", -3), "Ebiil, Tloia! 890")

        # Test case 8: Testing with a message containing only spaces and a positive encryption number
        self.assertEqual(encrypt("     ", 3), "     ")

        # Test case 9: Testing with a message containing only spaces and a negative encryption number
        self.assertEqual(encrypt("     ", -3), "     ")

        # Test case 10: Testing with an empty message
        self.assertEqual(encrypt("", 3), "")

if __name__ == '__main__':
    unittest.main()
